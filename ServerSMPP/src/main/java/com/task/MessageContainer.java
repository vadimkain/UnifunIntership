package com.task;

import lombok.Builder;
import lombok.Getter;
import lombok.Setter;

import java.sql.Timestamp;

/**
 * Класс, который служит для хранения информации о SMS-сообщении, которое может быть разбито на части и отправлено по частям через SMPP-сервер. В данном контексте этот класс может быть использован для управления информацией о разделенных SMS и их сборке в одно целое сообщение.
 */
@Builder
@Getter
@Setter
public class MessageContainer {
    //    Уникальный идентификатор SMS-сообщения. Этот идентификатор может быть использован для идентификации и связи всех частей одного SMS.
    private long messageId;

    //    Уникальный идентификатор контейнера. Каждая часть SMS может быть связана с общим идентификатором контейнера, который позволяет отличить одно SMS от другого.
    private String containerId;

    //    Длина SMS в символах. Это поле может быть использовано для определения размера SMS и принятия решений о разделении SMS на части.
    private short smsLen;

    //    Номер текущего контейнера. Когда SMS разбивается на части, каждая часть получает уникальный номер контейнера, который помогает определить порядок сборки.
    private short currentContainer;

    //    Количество полученных частей контейнера. Пока не все части контейнера не будут получены, сборка SMS не будет завершена.
    private short containerReceived;

    //    Массив строк, представляющих собой текст каждой части SMS.
    private String[] messagePart;

    //    Массив уникальных идентификаторов частей SMS. Эти идентификаторы могут использоваться для связи частей SMS внутри контейнера.
    private long[] messagePartIds;

    //    Полный текст SMS, который будет собран из всех частей. Это поле будет заполнено, когда все части будут получены.
    private String messageText;

    //    Тип отчета о доставке (Delivery Receipt) для SMS. Этот тип может указывать, что сообщение является отчетом о доставке, и может содержать дополнительную информацию о статусе доставки.
    private short dlrType;

    //    Время ожидания для SMS. Это может быть использовано для управления временем ожидания доставки SMS.
    private Timestamp waitTime;

    //    Дополнительный идентификатор. В данном контексте может быть использован для дополнительных метаданных или идентификации.
    private int id;
}
